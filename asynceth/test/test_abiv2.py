from asynceth import Contract, JsonRPCClient
from ethereum.utils import sha3 as keccak256

async def test_abiv2(parity):
    jsonrpc_client = JsonRPCClient(parity.url())

    contract = await Contract(
        jsonrpc_client, "asynceth/test/ABIv2Test.sol")\
        .set_signer(parity.get_faucet_private_key())\
        .deploy()

    method_id = keccak256("h((uint256,uint256)[])")[:4].hex()
    struct_array = [(1, 2), (3, 4)]

    data = "0x{method_id}{data_offset:064x}{num_elements:064x}{elements}".format(
        method_id=method_id, data_offset=32, num_elements=len(struct_array),
        elements="".join(["{0:064x}{1:064x}".format(*struct) for struct in struct_array]))
    rval = await jsonrpc_client.eth_call(to_address=contract.address,
                                         data=data)
    assert int(rval[2:], 16) == 10
    assert await contract.h(struct_array) == 10
    rval = await contract.g()
    assert rval == [(1, (2, 3), ((4, 5), (6, 7))), (8, 9), 10]

    # call f() manually to catch if experemental encoding changes
    method_id = keccak256("f((uint256,uint256[],(uint256,uint256)[]),(uint256,uint256),uint256)")[:4].hex()
    data = "".join(['0000000000000000000000000000000000000000000000000000000000000080',
                    '0000000000000000000000000000000000000000000000000000000000000008',
                    '0000000000000000000000000000000000000000000000000000000000000009',
                    '000000000000000000000000000000000000000000000000000000000000000a',
                    '0000000000000000000000000000000000000000000000000000000000000001',
                    '0000000000000000000000000000000000000000000000000000000000000060',
                    '00000000000000000000000000000000000000000000000000000000000000c0',
                    '0000000000000000000000000000000000000000000000000000000000000002',
                    '0000000000000000000000000000000000000000000000000000000000000002',
                    '0000000000000000000000000000000000000000000000000000000000000003',
                    '0000000000000000000000000000000000000000000000000000000000000002',
                    '0000000000000000000000000000000000000000000000000000000000000004',
                    '0000000000000000000000000000000000000000000000000000000000000005',
                    '0000000000000000000000000000000000000000000000000000000000000006',
                    '0000000000000000000000000000000000000000000000000000000000000007'])
    data = "0x{method_id}{data}".format(method_id=method_id, data=data)
    await jsonrpc_client.eth_call(to_address=contract.address,
                                  data=data)

    function_input = ((1, (2, 3), ((4, 5), (6, 7))), (8, 9), 10)
    await contract.f(*function_input)

    # sanity check output of multiple array
    # TODO: test contract returning multiple array, not supported by eth-abi yet
    method_id = keccak256("k()")[:4].hex()
    rval = await jsonrpc_client.eth_call(to_address=contract.address,
                                         data="0x" + method_id)
    assert rval == "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004"
